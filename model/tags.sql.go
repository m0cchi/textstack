// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: tags.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const createTag = `-- name: CreateTag :exec
INSERT INTO tags(text_uuid, name) VALUES ($1, $2)
`

type CreateTagParams struct {
	TextUuid uuid.UUID
	Name     string
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) error {
	_, err := q.db.ExecContext(ctx, createTag, arg.TextUuid, arg.Name)
	return err
}

const listTagsByName = `-- name: ListTagsByName :many
SELECT id, text_uuid, name FROM tags WHERE name = $1
`

func (q *Queries) ListTagsByName(ctx context.Context, name string) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTagsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.TextUuid, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTagsByUUID = `-- name: ListTagsByUUID :many
SELECT id, text_uuid, name FROM tags WHERE text_uuid = $1
`

func (q *Queries) ListTagsByUUID(ctx context.Context, textUuid uuid.UUID) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTagsByUUID, textUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.TextUuid, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
