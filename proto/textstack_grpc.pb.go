// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/textstack.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TextstackClient is the client API for Textstack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextstackClient interface {
	GetText(ctx context.Context, in *GetTextRequest, opts ...grpc.CallOption) (*GetTextResponse, error)
	CreateText(ctx context.Context, in *CreateTextRequest, opts ...grpc.CallOption) (*CreateTextResponse, error)
}

type textstackClient struct {
	cc grpc.ClientConnInterface
}

func NewTextstackClient(cc grpc.ClientConnInterface) TextstackClient {
	return &textstackClient{cc}
}

func (c *textstackClient) GetText(ctx context.Context, in *GetTextRequest, opts ...grpc.CallOption) (*GetTextResponse, error) {
	out := new(GetTextResponse)
	err := c.cc.Invoke(ctx, "/Textstack/GetText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textstackClient) CreateText(ctx context.Context, in *CreateTextRequest, opts ...grpc.CallOption) (*CreateTextResponse, error) {
	out := new(CreateTextResponse)
	err := c.cc.Invoke(ctx, "/Textstack/CreateText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextstackServer is the server API for Textstack service.
// All implementations must embed UnimplementedTextstackServer
// for forward compatibility
type TextstackServer interface {
	GetText(context.Context, *GetTextRequest) (*GetTextResponse, error)
	CreateText(context.Context, *CreateTextRequest) (*CreateTextResponse, error)
	mustEmbedUnimplementedTextstackServer()
}

// UnimplementedTextstackServer must be embedded to have forward compatible implementations.
type UnimplementedTextstackServer struct {
}

func (UnimplementedTextstackServer) GetText(context.Context, *GetTextRequest) (*GetTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetText not implemented")
}
func (UnimplementedTextstackServer) CreateText(context.Context, *CreateTextRequest) (*CreateTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateText not implemented")
}
func (UnimplementedTextstackServer) mustEmbedUnimplementedTextstackServer() {}

// UnsafeTextstackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextstackServer will
// result in compilation errors.
type UnsafeTextstackServer interface {
	mustEmbedUnimplementedTextstackServer()
}

func RegisterTextstackServer(s grpc.ServiceRegistrar, srv TextstackServer) {
	s.RegisterService(&Textstack_ServiceDesc, srv)
}

func _Textstack_GetText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextstackServer).GetText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Textstack/GetText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextstackServer).GetText(ctx, req.(*GetTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Textstack_CreateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextstackServer).CreateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Textstack/CreateText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextstackServer).CreateText(ctx, req.(*CreateTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Textstack_ServiceDesc is the grpc.ServiceDesc for Textstack service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Textstack_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Textstack",
	HandlerType: (*TextstackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetText",
			Handler:    _Textstack_GetText_Handler,
		},
		{
			MethodName: "CreateText",
			Handler:    _Textstack_CreateText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/textstack.proto",
}
